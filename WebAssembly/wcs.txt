// the two functions below unused
function _pix2sky(wcs, x, y) {
    return wcs.ready
        .then(_ => {
            // wcslib uses 1-indexing for pixel coordinates
            var world = Module.pix2sky(wcs.index, x + 1, y + 1);
            // console.log("world:", world);            

            return [world[0], world[1]];
        })
        .catch(err => {
            console.log(err);
        });
}

function _sky2pix(wcs, ra, dec) {
    return wcs.ready
        .then(_ => {
            var pixcrd = Module.sky2pix(wcs.index, ra, dec);
            // console.log("pixcrd:", pixcrd);            

            // wcslib uses 1-indexing for pixel coordinates
            return [pixcrd[0] - 1, pixcrd[1] - 1];
        })
        .catch(err => {
            console.log(err);
        });
}

// failed attempt to use CFITSIO deprecated WCS routines (from 1999) 
function fits_pix_to_world(wcs, x, y) {
    // console.log('fits_pix_to_world(' + wcs.index + ',' + x + ',' + y + ')');
    // wcs 1-indexing for pixel coordinates ?
    var world = Module.fits_pix_to_world(wcs.index, x + 0.5, y + 0.5);
    // console.log("world:", world);            

    return [world[0], world[1]];
}


// for comparison call the CFITSIO routine too
stat = Module.fits_read_img_coord(index, headerHeap.byteOffset, nkeyrec, va_count);
console.log("fits_read_img_coord() status: ", stat);

let _world = fits_pix_to_world(fitsData, orig_x, orig_y);

// WASM C

extern "C"
{
    // CFITSIO WCS
#include <wcs.h>
}

struct fitswcs **prm = NULL; // the static keyword was causing 'index out of bounds' error

// WCS utility functions (CFITSIO)
int fits_read_img_coord(int index, unsigned int header, int nkeyrec, int va_count)
{
    if (prm == NULL)
    {
        prm = (struct fitswcs **)calloc(va_count, sizeof(struct fitswcs *));

        if (prm == NULL)
        {
            printf("[fits_read_img_coord] failed to allocate memory for prm.\n");
            return -1;
        }
        else
            prm[index - 1] = NULL;
    }

    prm[index - 1] = (struct fitswcs *)malloc(sizeof(struct fitswcs));

    struct fitswcs *fits = prm[index - 1];
    char *hdr = (char *)header;

    if (fits == NULL)
    {
        printf("[fits_read_img_coord] failed to allocate memory for fitswcs.\n");
        return -1;
    }

    return myffgics(hdr, nkeyrec, &fits->xrval, &fits->yrval, &fits->xrpix, &fits->yrpix, &fits->xinc, &fits->yinc, &fits->rot, fits->type);
}

val fits_pix_to_world(int index, double x, double y)
{
    int status = 0;
    double xpos, ypos;
    double xpix = x, ypix = y;

    // print the input parameters
    printf("[WCS] fits_pix_to_world index: %d, xpix: %f, ypix: %f\n", index, xpix, ypix);

    if (prm != NULL)
    {
        struct fitswcs *fits = prm[index - 1];

        if (fits == NULL)
        {
            printf("[fits_pix_to_world] fitswcs is NULL.\n");
            status = -1;
        }
        else
            status = ffwldp(xpix, ypix, fits->xrval, fits->yrval, fits->xrpix, fits->yrpix, fits->xinc, fits->yinc, fits->rot, fits->type, &xpos, &ypos, &status);
    }

    // if status != 0 then fill-in coords with NaN
    if (status != 0)
    {
        printf("[WCS] ffwldp status: %d\n", status);

        coords[0] = NAN;
        coords[1] = NAN;
    }
    else
    {
        coords[0] = xpos;
        coords[1] = ypos;
    }

    return val(typed_memory_view(coordsLength, coords));
}

function("fits_read_img_coord", &fits_read_img_coord);
function("fits_pix_to_world", &fits_pix_to_world);