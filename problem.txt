Unfortunately it seems the new global pipe using mg_wakeup() and struct mg_str leaves a serious memory-leak loophole.

mg_wakeup() may return true signalling to a separate POSIX thread that the message corresponding to a given session->conn_id has been passed over to the mongoose event loop successfully. However, in the meantime a user might have closed the matching WebSocket connection (the one with c->conn_id).

This would mean that the mg_str actually pointing to another C structure web socket_message, with its malloced payload, would not be delivered to the MG_EV_WAKEUP event handler, where the payload memory would be expected to be released.

The mongoose code is not aware of the fact that mg_str->ptr now points to another structure, with its associated memory buffer.

To make matters worse, in the mg_wakeup() function the send command send(mgr->pipe, extended_buf, len + sizeof(conn_id), MSG_NONBLOCKING); loses a direct link to conn_id, it cannot tell whether or not the

const void *buf,
size_t len
buffer has actually been delivered all the way to the conn_id MG_EV_WAKEUP handler.

This scenario is not hypothetical, it is actually very likely to happen when separate non-mongoose threads (like in my code) call mg_wakeup() with non-string payloads (complex binary structures).

The previous point-to-point approach with mg_mkpipe() and mg_queue did not suffer from this problem. There were fewer intermediate steps. Either my payload was inserted successfully into the mg_queue or not. Two very clear outcomes. Either way my binary payload would be released without any memory leaks. The new global mg_wakeup() breaks this clear chain of command.

I think it might be worth to re-think the new mg_wakeup() functionality, re-design it so that it gives a clear feedback as to whether or not the payloads have been delivered all the way until the final MG_EV_WAKEUP event handler destination corresponding to c->conn_id. Failures should be communicated all the way back to the original caller of the mg_wakeup() function. Right now it's not happening.

I sincerely hope you can understand what I have been trying to say!
