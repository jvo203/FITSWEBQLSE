//
// src/webql.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>

#if !defined(__cplusplus)
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdbool.h>
#else
typedef int bool;
#endif
#endif



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

/* Portable alignment macro that works across different compilers and standards */
#if defined(__cplusplus) && __cplusplus >= 201103L
/* C++11 or newer - use alignas keyword */
#define __ISPC_ALIGN__(x) alignas(x)
#elif defined(__GNUC__) || defined(__clang__)
/* GCC or Clang - use __attribute__ */
#define __ISPC_ALIGN__(x) __attribute__((aligned(x)))
#elif defined(_MSC_VER)
/* Microsoft Visual C++ - use __declspec */
#define __ISPC_ALIGN__(x) __declspec(align(x))
#else
/* Unknown compiler/standard - alignment not supported */
#define __ISPC_ALIGN__(x)
#warning "Alignment not supported on this compiler"
#endif
#ifndef __ISPC_ALIGNED_STRUCT__
#if defined(_MSC_VER)
// Visual Studio
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#else
// Clang, GCC, ICC
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#endif
#endif

#ifndef __ISPC_STRUCT_fixed_block_t__
#define __ISPC_STRUCT_fixed_block_t__
struct fixed_block_t {
    int16_t mask[16];
    int16_t common_exp;
    int8_t mantissa[256];
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern float CorrelationSIMD(float theta, float b, float w, float gamma, float mu, float * pixels, uint8_t * mask, int32_t dimx, int32_t dimy);
    extern float WindowSIMDErr(float theta, float w, float mu, float sigma, float * pixels, uint8_t * mask, int32_t dimx, int32_t dimy);
    extern void array_stat(float * pixels, float * pmin, float * pmax, float * pmean, int64_t npixels);
    extern float array_std(float * pixels, float pmean, int64_t npixels);
    extern float brightness_ratio(float * pixels, float black, float sensitivity, int32_t offset, int32_t total_size);
    extern void fits2float32(int32_t * src, float * dest, uint32_t size);
    extern bool fits2float64(int64_t * src, float * dest, uint32_t size);
    extern void fits2int16(int16_t * src, float * dest, uint32_t size);
    extern void fits2int32(int32_t * src, float * dest, uint32_t size);
    extern void fits2int64(int64_t * src, float * dest, uint32_t size);
    extern void fits2uint8(uint8_t * src, float * dest, uint32_t size);
    extern void hds_image_spectrum_x(float x0, float y0, float theta, float * pixels, uint8_t * mask, int32_t dimx, int32_t dimy, float * outspec, uint8_t * outmask, uint8_t * valid);
    extern void hds_image_spectrum_y(int32_t x1, int32_t x2, float x0, float y0, float theta, float * pixels, uint8_t * mask, int32_t dimx, int32_t dimy, float * outspec, uint8_t * outmask, uint8_t * valid);
    extern void make_global_statistics(struct fixed_block_t * compressed, int32_t width, int32_t height, float median, float * sumP, int64_t * countP, float * sumN, int64_t * countN);
    extern void make_image_spectrumF32(float * src, float * pixels, uint8_t * mask, uint8_t * data_mask, double ignrval, double datamin, double datamax, double cdelt3, float * res, int64_t npixels);
    extern void make_video_frame_fixed_legacy(struct fixed_block_t * compressed, int32_t width, int32_t height, uint8_t * dst_luma, uint8_t * dst_mask, int32_t stride, float dmin, float dmax, float lmin, float lmax, int32_t fill);
    extern void make_video_frame_fixed_legacy_threaded(struct fixed_block_t * compressed, int32_t width, int32_t height, uint8_t * dst_luma, uint8_t * dst_mask, int32_t stride, float dmin, float dmax, float lmin, float lmax, int32_t fill, int32_t start, int32_t work_size);
    extern void make_video_frame_fixed_linear(struct fixed_block_t * compressed, int32_t width, int32_t height, uint8_t * dst_luma, uint8_t * dst_mask, int32_t stride, float black, float slope, int32_t fill);
    extern void make_video_frame_fixed_linear_threaded(struct fixed_block_t * compressed, int32_t width, int32_t height, uint8_t * dst_luma, uint8_t * dst_mask, int32_t stride, float black, float slope, int32_t fill, int32_t start, int32_t work_size);
    extern void make_video_frame_fixed_logistic(struct fixed_block_t * compressed, int32_t width, int32_t height, uint8_t * dst_luma, uint8_t * dst_mask, int32_t stride, float median, float sensitivity, int32_t fill);
    extern void make_video_frame_fixed_logistic_threaded(struct fixed_block_t * compressed, int32_t width, int32_t height, uint8_t * dst_luma, uint8_t * dst_mask, int32_t stride, float median, float sensitivity, int32_t fill, int32_t start, int32_t work_size);
    extern void make_video_frame_fixed_ratio(struct fixed_block_t * compressed, int32_t width, int32_t height, uint8_t * dst_luma, uint8_t * dst_mask, int32_t stride, float black, float sensitivity, int32_t fill);
    extern void make_video_frame_fixed_ratio_threaded(struct fixed_block_t * compressed, int32_t width, int32_t height, uint8_t * dst_luma, uint8_t * dst_mask, int32_t stride, float black, float sensitivity, int32_t fill, int32_t start, int32_t work_size);
    extern void make_video_frame_fixed_square(struct fixed_block_t * compressed, int32_t width, int32_t height, uint8_t * dst_luma, uint8_t * dst_mask, int32_t stride, float black, float sensitivity, int32_t fill);
    extern void make_video_frame_fixed_square_threaded(struct fixed_block_t * compressed, int32_t width, int32_t height, uint8_t * dst_luma, uint8_t * dst_mask, int32_t stride, float black, float sensitivity, int32_t fill, int32_t start, int32_t work_size);
    extern int32_t polarisation_simd(float * pixels, uint8_t * mask, int32_t plane_offset, int32_t stride, int32_t range, int32_t i, int32_t j, int32_t xmax, int32_t ymax, int32_t min_count, int32_t max_planes);
    extern void resizeNearestSIMD(uint8_t * src, int32_t srcWidth, int32_t srcHeight, uint8_t * dst, int32_t dstWidth, int32_t dstHeight);
    extern void standardise_array(float * pixels, float pmean, float pstd, int64_t npixels);
    extern float viewport_image_spectrum_circle(struct fixed_block_t * compressed, int32_t width, int32_t height, float pmin, float pmax, float * view_pixels, bool * view_mask, int32_t stride, int32_t x1, int32_t x2, int32_t y1, int32_t y2, int32_t horizontal, int32_t vertical, float cx, float cy, float r2, bool average, double cdelt3);
    extern float viewport_image_spectrum_rect(struct fixed_block_t * compressed, int32_t width, int32_t height, float pmin, float pmax, float * view_pixels, bool * view_mask, int32_t stride, int32_t x1, int32_t x2, int32_t y1, int32_t y2, int32_t horizontal, int32_t vertical, bool average, double cdelt3, float median, float * sumP, int64_t * countP, float * sumN, int64_t * countN);
    extern float viewport_spectrum_circle(struct fixed_block_t * compressed, int32_t width, int32_t height, float pmin, float pmax, int32_t x1, int32_t x2, int32_t y1, int32_t y2, float cx, float cy, float r2, bool average, double cdelt3);
    extern float viewport_spectrum_rect(struct fixed_block_t * compressed, int32_t width, int32_t height, float pmin, float pmax, int32_t x1, int32_t x2, int32_t y1, int32_t y2, bool average, double cdelt3);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
